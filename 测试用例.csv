工作项标题,工作项内容
测试用例 - 2 电梯 + 18 乘客同时请求,"env：环境：一栋楼有 10 层，两部电梯。（电梯运载能力: 限乘 10 人，速度，走进出一个乘客的时间，开门、关门的时间...等其他参数取默认值）。 
初始状态：电梯都在 1 层停靠。 

passenger 乘客数据：
在 0 时刻 （tick == 0）
10 层 到 2 层，每一层都有 2 位乘客，按了向下的按钮，他们的目的地都是 1 层。 

test-framework：启动，并对接 scheduler 调度算法，对接 GUI 程序，开始测试。 

期待：
test-framework：每个乘客平均的旅行时间 （从出现在世界上 到 走出电梯达到他想要去的楼层）
返回每个乘客的数据（在 log 文件中), 记录了每个乘客状态变化时候的 tick 值，状态的变化前后值。 
返回每个电梯在每个tick 的状态。 

GUI 程序， 能实况播放楼房+电梯+人的状态，  还能实况重放，拖动时间定点开始重放， 等常用的重放功能。 

"
测试用例 - 2 电梯 + 2 乘客同时请求,"env：环境：一栋楼有 10 层，两部电梯。（电梯运载能力: 限乘 10 人，速度，走进出一个乘客的时间，开门、关门的时间...等其他参数取默认值）。 
初始状态：电梯都在 1 层停靠。 

passenger 乘客数据：
在 0 时刻 （tick == 0）
10 和 5 层 各有 1 位乘客，都按了向下的按钮，他们的目的地都是 1 层。 

test-framework：启动，并对接 scheduler 调度算法，对接 GUI 程序，开始测试。 

期待：
test-framework：每个乘客平均的旅行时间 （从出现在世界上 到 走出电梯达到他想要去的楼层）
返回每个乘客的数据（在 log 文件中), 记录了每个乘客状态变化时候的 tick 值，状态的变化前后值。 
返回每个电梯在每个tick 的状态。 

GUI 程序， 能实况播放楼房+电梯+人的状态，  还能实况重放，拖动时间定点开始重放， 等常用的重放功能。 

"
测试用例 - 2 电梯， 多人从同一层请求去不同的楼层,"env：环境：一栋楼有 10 层，两部电梯。（电梯运载能力: 限乘 10 人，速度，走进出一个乘客的时间，开门、关门的时间...等其他参数取默认值）。 
初始状态：电梯都在 1 层停靠。 

passenger 乘客数据：
在 0 时刻 （tick == 0） 是 7AM
7:00:00 (7点0分0秒）： 22 名乘客都在 1 楼按下向上的箭头，他们的目的楼层是随机的（2 - 10），在一次测试用例中确定，不改变。 注意，每个乘客上进电梯的次序按照乘客ID 决定，在同一个测试用例中，如果乘客ID 和目的地都是一致的，那么，他们进到电梯的次序也是一致的。 

test-framework：启动，并对接 scheduler 调度算法，对接 GUI 程序，开始测试。 

期待：
test-framework：每个乘客平均的旅行时间 （从出现在世界上 到 走出电梯达到他想要去的楼层）
返回每个乘客的数据（在 log 文件中), 记录了每个乘客状态变化时候的 tick 值，状态的变化前后值。 
返回每个电梯在每个tick 的状态。 

GUI 程序， 能实况播放楼房+电梯+人的状态，  还能实况重放，拖动时间定点开始重放， 等常用的重放功能。 

"
测试用例：长时间间隔后的需求,"env：环境：一栋楼有 10 层，两部电梯。（电梯运载能力: 限乘 10 人，速度，走进出一个乘客的时间，开门、关门的时间...等其他参数取默认值）。
初始状态：电梯都在 1 层停靠。

passenger 乘客数据：
在 0 时刻 （tick == 0） 是 7AM
7:00:00 (7点0分0秒）： 21 名乘客都在 1 楼按了向上的箭头，他们的目的楼层都是 10层
8:00:00: 另外 21 名乘客都在 1 楼按了向上的箭头，他们的目的楼层都是 10层
9:00:00: 另外 21 名乘客都在 1 楼按了向上的箭头，他们的目的楼层都是 10层

这个用例考察什么：
1. 测试框架 （test-framework）在运行测试的时候，是否能跳过大段没有任何事件的时段？
2. 如果scheduler 算法有 “均衡安排电梯” 的算法， 例如，当空闲时， 能把电梯均匀分布在各个最可能有需求的楼层。 在这个情况下， 如果 scheduler 在发现电梯空闲时， 能把一个电梯放到 1 层， 那它的算法能更有效地处理从 1 层发起的大量需求。 
3. 测试框架的 “把时间跳过大段空闲” 和 scheduler 的 “空闲时我要调度一下电梯到合适的位置”  可能有冲突， 测试框架要允许scheduler 操作电梯（即使没有用户请求），直到 scheduler 再也没有新的指令了，电梯也处于等待状态了，test-framework 才能跳过空闲时间 （它可以读测试数据文件，知道下一个乘客出现在世界上的时刻）。 

test-framework：启动，并对接 scheduler 调度算法，对接 GUI 程序，开始测试。

期待：
test-framework：每个乘客平均的旅行时间 （从出现在世界上 到 走出电梯达到他想要去的楼层）
返回每个乘客的数据（在 log 文件中), 记录了每个乘客状态变化时候的 tick 值，状态的变化前后值。
返回每个电梯在每个tick 的状态。

GUI 程序， 能实况播放楼房+电梯+人的状态， 还能实况重放，拖动时间定点开始重放， 等常用的重放功能。"
测试用例：自动模拟多段旅程,"env：环境：一栋楼有 20 层，3 部电梯。（默认：电梯运载能力: 限乘 10 人，速度，走进出一个乘客的时间，开门、关门的时间...等其他参数取默认值）电梯1：只停靠 1，15-20 层，其它两部电梯停靠 1-15 层。 

初始状态：电梯都在 1 层停靠。

passenger 乘客数据：
在 0 时刻 （tick == 0） 是 7AM
7:01:00: 15 乘客从 20 层分别要去 15，14，13，12，11，... 1 层。 

测试目的：
1. 假设乘客 passenger 是知道各个电梯的停靠情况的，他会做简单理性的选择（在能达到目的地的情况下，旅行的总层数越少越好），在乘客的电梯旅行要分成多段的情况下， test-framework 和 schuduler 如何交流信息，真实地模拟和收集数据。 


test-framework：启动，并对接 scheduler 调度算法，对接 GUI 程序，开始测试。

期待：
test-framework：每个乘客平均的旅行时间 （从出现在世界上 到 走出电梯达到他想要去的楼层）
返回每个乘客的数据（在 log 文件中), 记录了每个乘客状态变化时候的 tick 值，状态的变化前后值。
返回每个电梯在每个tick 的状态。

GUI 程序， 能实况播放楼房+电梯+人的状态， 还能实况重放，拖动时间定点开始重放， 等常用的重放功能。"
测试用例：不同电梯到达的楼层不同,"env：环境：一栋楼有 20 层，3 部电梯。（默认：电梯运载能力: 限乘 10 人，速度，走进出一个乘客的时间，开门、关门的时间...等其他参数取默认值）电梯1：只停靠 1，15-20 层，其它两部电梯停靠所有层。 

初始状态：电梯都在 1 层停靠。

passenger 乘客数据：
在 0 时刻 （tick == 0） 是 7AM
7:00:00 (7点0分0秒）： 33 名乘客都在 1 楼按下向上的箭头，他们的目的楼层是随机的（2 - 20），在一次测试用例中确定，不改变。 注意，每个乘客上进电梯的次序按照乘客ID 决定，在同一个测试用例中，如果乘客ID 和目的地都是一致的，那么，他们进到电梯的次序也是一致的。


测试目的：
1. 假设乘客 passenger 是知道各个电梯的停靠情况的，他会做简单理性的选择（在能达到目的地的情况下，旅行的总层数越少越好）

test-framework：启动，并对接 scheduler 调度算法，对接 GUI 程序，开始测试。

期待：
test-framework：每个乘客平均的旅行时间 （从出现在世界上 到 走出电梯达到他想要去的楼层）
返回每个乘客的数据（在 log 文件中), 记录了每个乘客状态变化时候的 tick 值，状态的变化前后值。
返回每个电梯在每个tick 的状态。

GUI 程序， 能实况播放楼房+电梯+人的状态， 还能实况重放，拖动时间定点开始重放， 等常用的重放功能。"
测试用例：能耗作为另一个 KPI,"env：环境：一栋楼有 20 层，4 部电梯。（默认：电梯运载能力: 限乘 10 人，能耗，速度，走进出一个乘客的时间，开门、关门的时间...等其他参数取默认值）电梯1：只停靠 1，15-20 层，其它两部电梯停靠所有层。
电梯 2-3：取默认值。
电梯4：限乘 20 人，但是它的能耗是默认电梯的 3 倍，它的速度是默认电梯的 90%。 它停所有楼层。 可以理解为货梯。 
（假设：各个电梯的能耗和运送的乘客数量和体重无关）

初始状态：电梯都在 1 层停靠。

模拟一个典型的上班早高峰：（8am - 9:40am）
90% 的乘客是从 1 层到其它各层，他们到达1 层的时间是以 8:50 为最高值的正态分布。 
10% 的乘客是在随机的楼层中上下。 
乘客总数为 2000 人

测试目的：
1. 测试框架和调度算法之间如何传递 “能耗” 信息； 
2. 调度算法能否对两个指标优化：两个指标：能耗，平均乘客的旅行时间
3. 调度算法对于新指标如何高效地重构

测试结果：输出两个指标：能耗，平均乘客的旅行时间

最后所有学生竞赛：按照能耗和旅行时间排名， 二者平均，取总的名次。 
"
测试用例： 竞赛：典型的工作日,"env：环境：一栋楼有 20 层，4 部电梯。（默认：电梯运载能力: 限乘 10 人，能耗，速度，走进出一个乘客的时间，开门、关门的时间...等其他参数取默认值）电梯1：只停靠 1，15-20 层，其它两部电梯停靠所有层。
电梯 2-3：取默认值。
电梯4：限乘 20 人，但是它的能耗是默认电梯的 3 倍，它的速度是默认电梯的 90%。 它停所有楼层。 可以理解为货梯。
（假设：各个电梯的能耗和运送的乘客数量和体重无关）

初始状态：scheduler 可以在初始时刻设定每个电梯的初始位置 （这可能会改变 API）

模拟一个典型的工作日：
1. 早高峰（8am - 10am）
90% 的乘客是从 1 层到其它各层，他们到达1 层的时间是以 9am 为最高值的正态分布。
10% 的乘客是在随机的楼层中上下。
这个时段的乘客总数为 2000 人

2. 中途： （10am - 5pm)
每 10 秒钟有 1 个乘客在随机的楼层中上下。

3. 晚高峰 （5pm 到7pm）
90% 的乘客是从其它层到 1 层，他们到达 1 层的时间是以 6pm 为最高值的正态分布。
10% 的乘客是在随机的楼层中上下。
这个时段的乘客总数为 2000 人


测试目的：

1.  测试框架能以多快的速度真实地模拟和测试 11 小时的运行情况

2. 调度算法能否对两个指标优化：两个指标：能耗，平均乘客的旅行时间

测试结果：输出两个指标：能耗，平均乘客的旅行时间

最后所有学生竞赛：按照能耗和旅行时间排名， 二者平均，取总的名次。"
